@using TheWarpZone.Web.Areas.Admin.ViewModels;
@using TheWarpZone.Web.ViewModels.Shared;

@model TheWarpZone.Web.ViewModels.Shared.Movie.MovieDetailsViewModel

@{
    ViewData["Title"] = "Movie Details";
}

<h1>@Model.Title</h1>

<div class="row">
    <div class="col-md-4">
        <img src="@Model.ImageUrl" alt="@Model.Title" class="img-fluid">
    </div>
    <div class="col-md-8">
        <h4>Director: @Model.Director</h4>
        <h5>Release Date: @Model.ReleaseDate.ToShortDateString()</h5>
        <h5>Average Rating: <span id="averageRating">@Model.AverageRating</span></h5>
        <p>@Model.Description</p>

        <h5>Tags:</h5>
        <ul>
            @foreach (var tag in Model.Tags)
            {
                <li>@tag</li>
            }
        </ul>

        @if (User.Identity.IsAuthenticated)
        {
            <h5>Your Rating: <span id="userRating">@Model.UserRating</span></h5>
            <form id="ratingForm" asp-controller="Rating" asp-action="AddOrUpdateRating" method="post" asp-area="" class="d-inline">
                <input type="hidden" name="mediaId" value="@Model.Id" />
                <input type="hidden" name="mediaType" value="Movie" />

                <div class="form-group">
                    <label for="rating">Rate this Movie:</label>
                    <select name="ratingValue" class="form-control" id="rating">
                        @for (int i = 1; i <= 5; i++)
                        {
                            if (Model.UserRating == i)
                            {
                                <option value="@i" selected>@i</option>
                            }
                            else
                            {
                                <option value="@i">@i</option>
                            }
                        }
                    </select>
                </div>
                <button type="submit" class="btn btn-primary">Submit Rating</button>
            </form>

            @if (Model.UserRating > 0)
            {
                <form id="removeRatingForm" asp-controller="Rating" asp-action="DeleteRating" method="post" asp-area="" class="d-inline">
                    <input type="hidden" name="mediaId" value="@Model.Id" />
                    <input type="hidden" name="mediaType" value="Movie" />
                    <button type="submit" class="btn btn-danger">Remove Rating</button>
                </form>
            }

            <h5>Add to Your Watchlist:</h5>
            <form asp-controller="UserMediaList" asp-action="AddToList" method="post" asp-area="" class="d-inline">
                <input type="hidden" name="MovieId" value="@Model.Id" />
                <input type="hidden" name="Title" value="@Model.Title" />
                <input type="hidden" name="returnUrl" value="@Url.Action("Details", "Movie", new { id = Model.Id, area = "Admin" })" />

                <div class="form-group">
                    <select name="Status" class="form-control">
                        <option value="ToWatch">To Watch</option>
                        <option value="CurrentlyWatching">Currently Watching</option>
                        <option value="Watched">Watched</option>
                    </select>
                </div>
                <button type="submit" class="btn btn-primary">Add to Watchlist</button>
            </form>
        }
        else
        {
            <p class="text-muted">Log in to rate this movie or add it to your watchlist.</p>
        }
        
        <div>
            <a asp-controller="Review" asp-action="Index" asp-route-movieId="@Model.Id" asp-area="" class="btn btn-secondary">View All Reviews</a>
        </div>

        <div class="mt-3">
            <a asp-action="Edit" asp-route-id="@Model.Id" class="btn btn-primary">Edit</a>
            <a asp-action="Delete" asp-route-id="@Model.Id" class="btn btn-danger">Delete</a>
            <a asp-action="Index" class="btn btn-secondary">Back to Movies</a>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.getElementById("ratingForm").addEventListener("submit", function (e) {
            e.preventDefault();
            const formData = new FormData(this);

            fetch(this.action, {
                method: this.method,
                body: formData,
                headers: { "X-Requested-With": "XMLHttpRequest" }
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    alert(data.message);
                    document.getElementById("averageRating").innerText = data.newAverageRating;
                    document.getElementById("userRating").innerText = formData.get("ratingValue");
                    location.reload();
                } else {
                    alert(data.message || "An error occurred.");
                }
            })
            .catch(error => console.error("Error:", error));
        });

        document.getElementById("removeRatingForm")?.addEventListener("submit", function (e) {
            e.preventDefault();
            const formData = new FormData(this);

            fetch(this.action, {
                method: this.method,
                body: formData,
                headers: { "X-Requested-With": "XMLHttpRequest" }
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    alert(data.message);
                    document.getElementById("averageRating").innerText = data.newAverageRating;
                    document.getElementById("userRating").innerText = "N/A";
                    location.reload();
                } else {
                    alert(data.message || "An error occurred.");
                }
            })
            .catch(error => console.error("Error:", error));
        });
    </script>
}
